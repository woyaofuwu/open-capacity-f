def mvnCmd = "mvn -s cicd-settings-nexus3.xml"
def mvnCmd1 = "mvn -s ../cicd-settings-nexus3.xml"
def mvnCmd2 = "mvn -s ../../cicd-settings-nexus3.xml"
pipeline {
  agent {
    label 'maven'
  }
  stages {
    stage('Build App') {
      steps {
        git branch: '2.0.1', url: 'http://gogs:3000/gogs/open-capacity-f.git'
        sh "${mvnCmd} install package -DskipTests=true"
      }
    }
    
   /** stage('Code Analysis') {
      steps {
        script {
          sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
        }
      }
    }
    stage('Archive App') {
      steps {
        sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
      }
    }**/
    stage('Build api-gateway Image') {
      steps {
        //sh "pwd  && oc delete all -l build=api-gateway -n ${DEV_PROJECT}"
        //sh "oc delete bc,dc,svc,route,is -l app=api-gateway -n ${DEV_PROJECT}"
        //sh "oc new-app --name api-gateway --strategy docker --from-file=api-gateway/Dockerfile -n ${DEV_PROJECT}" 
        //sh " cd api-gateway/target/ && export jarpath=`pwd` && ${jarpath}"
        //sh "cp api-gateway/target/api-gateway.jar  /tmp/api-gateway.jar && chmod -R g=u /tmp/api-gateway.jar"
        //sh "pwd && cd api-gateway/target/ && pwd && dir  && oc new-build --strategy=docker --dockerfile='FROM   registry.access.redhat.com/ubi8/ubi:8.0  \n ENV	JAVA_OPTIONS -Xmx512m \n RUN  whoami && pwd && dir && yum install -y --disableplugin=subscription-manager java-1.8.0-openjdk-headless && yum clean all --disableplugin=subscription-manager -y &&   mkdir -p /opt/app-root/bin   \n  ADD  /tmp/api-gateway.jar /opt/app-root/bin/ \n COPY  run-app.sh /opt/app-root/bin/ \n RUN   chgrp -R 0 /opt/app-root &&  chmod -R g=u /opt/app-root \n  EXPOSE 8080  \n USER  1001 \n  CMD   /opt/app-root/bin/run-app.sh' --name api-gateway  -n ${DEV_PROJECT}"
        sh "cp api-gateway/target/api-gateway.jar api-gateway/target/ROOT.jar"
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              openshift.selector("bc", "tasks").startBuild("--from-file=api-gateway/target/ROOT.jar", "--wait=true")
            }
          }
        }
      }
    }
    /**
    stage('Deploy DEV') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              openshift.selector("dc", "tasks").rollout().latest();
            }
          }
        }
      }
    }
    stage('Promote to STAGE?') {
      agent {
        label 'skopeo'
      }
      steps {
        timeout(time:15, unit:'MINUTES') {
            input message: "Promote to STAGE?", ok: "Promote"
        }

        script {
          openshift.withCluster() {
            if (env.ENABLE_QUAY.toBoolean()) {
              withCredentials([usernamePassword(credentialsId: "${openshift.project()}-quay-cicd-secret", usernameVariable: "QUAY_USER", passwordVariable: "QUAY_PWD")]) {
                sh "skopeo copy docker://quay.io//tasks-app:latest docker://quay.io//tasks-app:stage --src-creds \"$QUAY_USER:$QUAY_PWD\" --dest-creds \"$QUAY_USER:$QUAY_PWD\" --src-tls-verify=false --dest-tls-verify=false"
              }
            } else {
              openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:stage")
            }
          }
        }
      }
    }
    stage('Deploy STAGE') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              openshift.selector("dc", "tasks").rollout().latest();
            }
          }
        }
      }
    }**/
  }
}