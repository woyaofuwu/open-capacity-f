            def mvnCmd = "mvn -s cicd-settings-nexus3.xml"
            def mvnCmd1 = "mvn -s ../cicd-settings-nexus3.xml"
            def mvnCmd2 = "mvn -s ../../cicd-settings-nexus3.xml"
            pipeline {
              agent {
                label 'maven'
              }
              stages {
                stage('Build App') {
                  steps {
                    git branch: '2.0.1', url: 'http://gogs:3000/gogs/open-capacity-f.git'                
                    sh "${mvnCmd} clean install package -DskipTests"
                  }
                }
                
                stage('Code Analysis') {
                  steps {
                    script {
                      sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                    }
                  }
                }
                /**stage('Archive App') {
                  steps {
                    sh "${mvnCmd} deploy -DskipTests=true "//-P nexus3 20200716 pom.xml settings.xml 配置调整后可以deploy
                  }
                }**/
                stage('Build eureka-server Image') {
                  steps {
                      sh " cd register-center/eureka-server/target && dir"
                       sh " cp register-center/eureka-server/target/eureka-server.jar target/ROOT.jar"
                    //sh "cd register-center/eureka-server && ${mvnCmd2} docker:build -Dfabric8.namespace=dev-open-capacity "
                    //sh t"cd oauth-center/auth-server && ${mvnCmd2} docker:build -Dfabric8.namespace=dev-open-capacity "
                    //sh "cd oauth-cener/auth-sso && ${mvnCmd2} docker:build -Dfabric8.namespace=dev-open-capacity "
                    //sh "cd api-gateway && ${mvnCmd2} docker:build -Dfabric8.namespace=dev-open-capacity "
                   // sh "cd new-api-gateway && ${mvnCmd2} docker:build -Dfabric8.namespace=dev-open-capacity "
                    script {
                      openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                          openshift.selector("bc", "opencapacity-eureka").startBuild("--from-file=target/ROOT.jar", "--wait=true")
                        }
                      }
                    }
                  }
                }
              }
            }